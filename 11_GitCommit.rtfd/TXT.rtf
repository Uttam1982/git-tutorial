{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica-Bold;\f4\fmodern\fcharset0 Courier-Oblique;\f5\fnil\fcharset0 AppleColorEmoji;
\f6\fswiss\fcharset0 Helvetica-LightOblique;\f7\fswiss\fcharset0 Helvetica-BoldOblique;\f8\fmodern\fcharset0 Courier-BoldOblique;
}
{\colortbl;\red255\green255\blue255;\red35\green46\blue57;\red65\green74\blue82;\red62\green62\blue62;
\red0\green0\blue0;\red14\green32\blue46;\red245\green245\blue246;\red255\green255\blue255;\red21\green163\blue221;
\red135\green136\blue117;\red210\green0\blue53;\red0\green0\blue109;\red106\green133\blue157;}
{\*\expandedcolortbl;;\cssrgb\c18039\c23922\c28627;\cssrgb\c32157\c36078\c39608;\cssrgb\c30980\c30980\c30980;
\cssrgb\c0\c0\c0;\cssrgb\c5882\c16863\c23922;\cssrgb\c96863\c96863\c97255;\cssrgb\c100000\c100000\c100000;\cssrgb\c784\c70196\c89412;
\cssrgb\c60000\c60000\c53333;\cssrgb\c86667\c6667\c26667;\cssrgb\c0\c0\c50196;\cssrgb\c49020\c59216\c67843;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid402\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh20200\viewkind0
\deftab720
\pard\pardeftab720\sl640\sa140\partightenfactor0

\f0\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Quick Check In\
\pard\pardeftab720\sl400\partightenfactor0

\fs24 \cf3 \strokec3 We're just about to make our first commit, so let's verify that our projects are set up the same way:\
\pard\pardeftab720\sl400\partightenfactor0

\fs30 \cf4 \strokec4 Task List\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0
\fs21 \cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs24 \cf4 \strokec4 the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 index.html
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0file exists and has starter code in it\uc0\u8232 \u8232 
\fs21 \uc0\u8232 
\f2\i \cf8 \strokec8 \uc0\u8232 
\f0\i0 \cf4 \strokec4 \
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs24 \cf4 \strokec4 the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 app.css
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0file exists in the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 css
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0folder\uc0\u8232 \u8232 
\fs21 \uc0\u8232 
\f2\i \cf8 \strokec8 \uc0\u8232 
\f0\i0 \cf4 \strokec4 \
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs24 \cf4 \strokec4 the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 app.js
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0file exists in the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 js
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0folder\uc0\u8232 \u8232 
\fs21 \uc0\u8232 
\f2\i \cf8 \strokec8 \uc0\u8232 
\f0\i0 \cf4 \strokec4 \
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs24 \cf4 \strokec4 all three files have been staged\uc0\u8232 \u8232 
\fs21 \uc0\u8232 
\f2\i \cf8 \strokec8 \uc0\u8232 
\f0\i0 \cf4 \strokec4 \
\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 One Last Git Status Check\
\pard\pardeftab720\sl400\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 If you haven't added any new files to the Working Directory or modified any of the existing files, nothing will have changed, but to make sure, let's run a quick\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git status
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0again right before we make the commit just to make\'a0
\f2\i absolutely sure
\f0\i0 \'a0the project is how we left it.\
\pard\pardeftab720\sl400\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://classroom.udacity.com/nanodegrees/nd104-ent/parts/e325d5cc-ccd1-4ca8-a562-7eed09ab76c7/modules/a141ebc6-acee-494b-927f-2016d6fe0f9c/lessons/950113cc-8d4b-4346-b03f-8872ded1c0a6/concepts/95564c00-5060-45e7-aa24-e26fb9039f90#"}}{\fldrslt 
\fs30 \cf9 \cb8 \strokec9 \
\pard\pardeftab720\sl400\qc\partightenfactor0

\f2\i\fs24 \cf2 \cb1 \strokec2 The Terminal application shows that the index.html, css/app.css, and js/app.js have been staged and are ready to be committed.
\f0\i0 \
}}\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 Make A Commit\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 Ok, let's do it!\
To make a commit in Git you use the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0command, but don't run it just yet. Running this command will open the code editor that you configured way back in the first lesson. If you haven't run this command yet:\
\pard\pardeftab720\sl420\partightenfactor0

\f1 \cf6 \cb7 \strokec6 \uc0\u8237 $ git config --global core.editor <your-editor's-config-went-here>\uc0\u8236 \
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0 \cf4 \cb1 \strokec4 \uc0\u8236 ...go back to the Git configuration step and configure Git to use your chosen editor.\
If you didn't do this step and you\'a0
\f2\i already
\f0\i0 \'a0ran\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 , then Git\'a0
\f2\i probably
\f0\i0 \'a0defaulted to using the "Vim" editor. Vim is a popular editor for people who have been using Unix or Linux systems forever, but it's not the friendliest for new users. It's definitely not in the scope of this course. Check out\'a0{\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/11828270/how-to-exit-the-vim-editor"}}{\fldrslt \cf9 \strokec9 this Stack Overflow post on how to get out of Vim}}\'a0and return to the regular command prompt.\
If you\'a0
\f2\i did
\f0\i0 \'a0configure your editor, then go ahead and make a commit using the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0command:\
\pard\pardeftab720\sl420\partightenfactor0

\f1 \cf6 \cb7 \strokec6 \uc0\u8237 $ git commit\uc0\u8236 \
\pard\pardeftab720\sl400\partightenfactor0

\f0 \cf4 \cb1 \strokec4 \uc0\u8236 Remember, your editor should pop open and you should see something like this:\
\pard\pardeftab720\sl400\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://classroom.udacity.com/nanodegrees/nd104-ent/parts/e325d5cc-ccd1-4ca8-a562-7eed09ab76c7/modules/a141ebc6-acee-494b-927f-2016d6fe0f9c/lessons/950113cc-8d4b-4346-b03f-8872ded1c0a6/concepts/95564c00-5060-45e7-aa24-e26fb9039f90#"}}{\fldrslt 
\fs30 \cf9 \cb8 \strokec9 \pard\pardeftab720\sl400\qc\partightenfactor0
\cf9 \
\pard\pardeftab720\sl400\qc\partightenfactor0

\f2\i\fs24 \cf2 \cb1 \strokec2 Code editor displaying the default commit edit message content and is waiting for a commit message to be supplied.
\f0\i0 \
}}\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 Terminal Hangs\
\pard\pardeftab720\sl400\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 If you switch back to the Terminal for a quick second, you'll see that the Terminal is chillin' out just waiting for you to finish with the code editor that popped up. You don't need to worry about this, though. Once we add the necessary content to the code editor and finally\'a0
\f2\i close the code editor window
\f0\i0 , the Terminal will unfreeze and return to normal.\
\pard\pardeftab720\sl400\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://classroom.udacity.com/nanodegrees/nd104-ent/parts/e325d5cc-ccd1-4ca8-a562-7eed09ab76c7/modules/a141ebc6-acee-494b-927f-2016d6fe0f9c/lessons/950113cc-8d4b-4346-b03f-8872ded1c0a6/concepts/95564c00-5060-45e7-aa24-e26fb9039f90#"}}{\fldrslt 
\fs30 \cf9 \cb8 \strokec9 \pard\pardeftab720\sl400\qc\partightenfactor0
\cf9 \
\pard\pardeftab720\sl400\qc\partightenfactor0

\f2\i\fs24 \cf2 \cb1 \strokec2 The Terminal application showing\'a0
\f4 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f2 \cf2 \cb1 \strokec2 \uc0\u8236 \'a0but it appears to be hanging and waiting for something.
\f0\i0 \
}}\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 Code Editor Commit Message Explanation\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 Ok, switch back to the code editor. Here's what's showing in my editor:\
\pard\pardeftab720\sl420\partightenfactor0

\f4\i \cf10 \cb7 \strokec10 \uc0\u8237 # Please enter the commit message for your changes. Lines starting
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 # with '#' will be ignored, and an empty message aborts the commit.
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 # On branch master
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 #
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 # Initial commit
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 #
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 # Changes to be committed:
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 #    new file:   css/app.css
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 #    new file:   index.html
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 #    new file:   js/app.js
\f1\i0 \cf6 \strokec6 \uc0\u8236 \

\f4\i \cf10 \strokec10 #
\f1\i0 \cf6 \strokec6 \uc0\u8236 \
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0 \cf4 \cb1 \strokec4 \uc0\u8236 The first paragraph is telling us exactly what we need to do - we need to supply a message for this commit. Also, any line that begins with the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 #
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0character will be ignored. Farther down it says that this will be the initial commit. Lastly, it's giving us a list of the files that will be committed.\
Since this is the very first commit of the repository, we'll use the commit message "Initial commit". The text "Initial commit" isn't special, but it's the de facto commit message for the\'a0
\f2\i very first
\f0\i0 \'a0commit. If you want to use something else, feel free!\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 Type out your commit message on the first line of the code editor:\
\pard\pardeftab720\sl400\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://classroom.udacity.com/nanodegrees/nd104-ent/parts/e325d5cc-ccd1-4ca8-a562-7eed09ab76c7/modules/a141ebc6-acee-494b-927f-2016d6fe0f9c/lessons/950113cc-8d4b-4346-b03f-8872ded1c0a6/concepts/95564c00-5060-45e7-aa24-e26fb9039f90#"}}{\fldrslt 
\fs30 \cf9 \cb8 \strokec9 \pard\pardeftab720\sl400\qc\partightenfactor0
\cf9 \
\pard\pardeftab720\sl400\qc\partightenfactor0

\f2\i\fs24 \cf2 \cb1 \strokec2 Code editor with the commit message entered on the first line.
\f0\i0 \
}}\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 Finish Committing\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 Now save the file and close the editor window (closing just the pane/tab isn't enough, you need to close the code editor window that the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0command opened).\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 Awesome, now switch back to the Terminal and you should see something like the following:\
\pard\pardeftab720\sl400\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://classroom.udacity.com/nanodegrees/nd104-ent/parts/e325d5cc-ccd1-4ca8-a562-7eed09ab76c7/modules/a141ebc6-acee-494b-927f-2016d6fe0f9c/lessons/950113cc-8d4b-4346-b03f-8872ded1c0a6/concepts/95564c00-5060-45e7-aa24-e26fb9039f90#"}}{\fldrslt 
\fs30 \cf9 \cb8 \strokec9 \pard\pardeftab720\sl400\qc\partightenfactor0
\cf9 \
\pard\pardeftab720\sl400\qc\partightenfactor0

\f2\i\fs24 \cf2 \cb1 \strokec2 The Terminal application after closing the code editor. It displays the SHA for the new commit as well as information about the commit like the files that were added and how many lines of code were added.
\f0\i0 \
}}\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 First Commit, Congrats!\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 You just made your first commit - woohoo! 
\f5 \uc0\u55357 \u56908 \u55356 \u57340 
\f0  How does it feel? Was it more towards the awe-inspiring side or the anticlimactic? Honestly, when I made my first commit, I was a bit like:\
\pard\pardeftab720\sl400\partightenfactor0

\f6\i \cf4 "Wait...is that it? You just add the files you want to have committed to the Staging Area, and then you run 'git commit'?"\
\pard\pardeftab720\sl400\partightenfactor0

\f0\i0 \cf4 ...and the answer to my questions are "Yes" and "Yes". That's all there is to it. At first, version control seems like this overwhelming obstacle that one must overcome to become a true programmer/developer/designer/etc. But once you get a handle on the terminology (which\'a0
\f2\i I
\f0\i0 \'a0think is the most challenging part), then actually using version control isn't all that challenging.\
\pard\pardeftab720\sl533\partightenfactor0

\f7\i\b\fs40 \cf2 \strokec2 Bypass The Editor With The\'a0
\f8 \cf6 \cb7 \strokec6 \uc0\u8237 -m
\f7 \cf2 \cb1 \strokec2 \uc0\u8236 \'a0Flag\
\pard\pardeftab720\sl400\partightenfactor0

\f6\b0\fs24 \cf4 \strokec4 TIP: If the commit message you're writing is short and you don't want to wait for your code editor to open up to type it out, you can pass your message directly on the command line with the\'a0
\f4 \cf6 \cb7 \strokec6 \uc0\u8237 -m
\f6 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0flag:\
\pard\pardeftab720\sl420\partightenfactor0

\f4\fs36 \cf6 \cb7 \strokec6 \uc0\u8237 $ git commit -m \cf11 \strokec11 "Initial commit"\cf6 \strokec6 \uc0\u8236 \
\pard\pardeftab720\sl400\partightenfactor0

\f6\fs24 \cf4 \cb1 \strokec4 \uc0\u8236 In the example above, the text\'a0
\f4 \cf6 \cb7 \strokec6 \uc0\u8237 "Initial commit"
\f6 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0is used as the commit message. Be aware that you can't provide a description for the commit, only the message part.\
\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\i0\b\fs40 \cf2 \strokec2 2nd Commit - Add Changes\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 We've had a short breather, so let's make a second commit! Here, add this just inside the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 body
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0tag in\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 index.html
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 :\
\pard\pardeftab720\sl420\partightenfactor0

\f1 \cf12 \cb7 \strokec12 \uc0\u8237 <header>\cf6 \strokec6 \uc0\u8236 \
    \cf12 \strokec12 <h1>\cf6 \strokec6 Expedition\cf12 \strokec12 </h1>\cf6 \strokec6 \uc0\u8236 \
\cf12 \strokec12 </header>\cf6 \strokec6 \uc0\u8236 \
\pard\pardeftab720\sl400\partightenfactor0

\f0 \cf4 \cb1 \strokec4 \uc0\u8236 Ok, now what do you do next? That's right, it's our good old friend\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git status
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 !\
\pard\pardeftab720\sl400\qc\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://classroom.udacity.com/nanodegrees/nd104-ent/parts/e325d5cc-ccd1-4ca8-a562-7eed09ab76c7/modules/a141ebc6-acee-494b-927f-2016d6fe0f9c/lessons/950113cc-8d4b-4346-b03f-8872ded1c0a6/concepts/95564c00-5060-45e7-aa24-e26fb9039f90#"}}{\fldrslt 
\fs30 \cf9 \cb8 \strokec9 \pard\pardeftab720\sl400\qc\partightenfactor0
\cf9 \
\pard\pardeftab720\sl400\qc\partightenfactor0

\f2\i\fs24 \cf2 \cb1 \strokec2 The Terminal application showing the result of the\'a0
\f4 \cf6 \cb7 \strokec6 \uc0\u8237 git status
\f2 \cf2 \cb1 \strokec2 \uc0\u8236 \'a0command. It displays a "Changes not staged for commit" section that includes the modified "index.html" file.
\f0\i0 \
}}\pard\pardeftab720\sl400\partightenfactor0

\f6\i \cf4 TIP: If you run\'a0
\f4 \cf6 \cb7 \strokec6 \uc0\u8237 git status
\f6 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0but don't see that\'a0
\f4 \cf6 \cb7 \strokec6 \uc0\u8237 index.html
\f6 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0has changed, make sure to save the file. I modify a file and then forget to save it -\'a0all\'a0-\'a0the\'a0-\'a0time! I like to think that forgetting to save a file after editing it is the mark of a true professional.\
\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\i0\b\fs40 \cf2 \strokec2 Multipurpose Git Add\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 So we've modified our file. Git sees that it's been modified. So we're doing well so far. Now remember, to make a commit, the file or files we want committed need to be on the Staging Index. What command do we use to move files from the Working Directory to the Staging Index? You got it -\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git add
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 !\
Even though we used\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git add
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0to add\'a0
\f2\i newly created files
\f0\i0 \'a0to the Staging Index, we use the same command to move\'a0
\f2\i modified files
\f0\i0 \'a0to the Staging Index.\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 Use the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git add
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0command to move the file over to the Staging Index, now. Verify that it's there with\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git status
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 .\
\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 Second Commit\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 Now that we have a file with changes we can commit, let's make our second commit! Use the\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0command to make a commit. Use the commit message\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 Add header to blog
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 .\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 Now you might be asking yourself, "Why did Richard pick that as the commit message to use?" or "What makes a good commit message?". These are fantastic questions that we'll be looking at in the next concept!\
\pard\pardeftab720\sl373\sa200\partightenfactor0

\f3\b\fs28 \cf13 \cb8 \strokec13 QUIZ QUESTION\cb1 \
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf2 \cb8 \strokec2 Let's say you have a personal blog and want to change the color of the article headings. You\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls2\ilvl0\cf2 \cb8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 edit the HTML files to give each heading a class\cb1 \
\ls2\ilvl0\cb8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 edit the CSS file to add the new class and give it a color\cb1 \
\ls2\ilvl0\cb8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 you save all files\cb1 \
\ls2\ilvl0\cb8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 you run\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f0 \cf2 \cb8 \strokec2 \uc0\u8236 \'a0on the terminal\cb1 \
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb8 Will your code editor open up to let you type out the commit message?\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls3\ilvl0
\fs21 \cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs24 \cf2 \cb8 \strokec2 Yes\cb1 \uc0\u8232 \u8232 
\fs21 \cf4 \strokec4 \uc0\u8232 \u8232 
\fs24 \cb8 No\cb1 \uc0\u8232 \u8232 
\fs28 \uc0\u8232 
\fs30 \
\pard\pardeftab720\sl360\qr\partightenfactor0

\f3\b\fs19\fsmilli9750 \cf8 \cb9 \strokec8 SUBMIT
\f0\b0\fs30 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\b\fs40 \cf2 \strokec2 What To Include In A Commit\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 I've been telling you what files to create, giving you the content to include, and telling you when you should make commits. But when you're on your own, how do you know what you should include in a commit and when/how often you should make commits?\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f3\b \cf4 The goal is that each commit has a single focus.
\f0\b0 \'a0Each commit should record a single-unit change. Now this can be a bit subjective (which is totally fine), but each commit should make a change to just one aspect of the project.\
Now this isn't limiting the number of lines of code that are added/removed or the number of files that are added/removed/modified. Let's say you want to change your sidebar to add a new image. You'll probably:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls4\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 add a new image to the project files\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 alter the HTML\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 add/modify CSS to incorporate the new image\
\pard\pardeftab720\sl400\sa300\partightenfactor0
\cf4 A commit that records all of these changes would be totally fine!\
Conversely, a commit shouldn't include unrelated changes - changes to the sidebar\'a0
\f2\i and
\f0\i0 \'a0rewording content in the footer. These two aren't related to each other and shouldn't be included in the same commit. Work on one change first, commit that, and then change the second one. That way, if it turns out that one change had a bug and you have to undo it, you don't have to undo the other change too.\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 The best way that I've found to think about what should be in a commit is to think, "What if all changes introduced in this commit were erased?". If a commit were erased, it should only remove one thing.\
\pard\pardeftab720\sl400\partightenfactor0

\f6\i \cf4 Don't worry, commits don't get randomly erased.\
In a later lesson, we'll look at using Git to undo changes made in commits and how to manually, carefully remove the last commit that was made.\
\pard\pardeftab720\sl533\sa100\partightenfactor0

\f3\i0\b\fs40 \cf2 \strokec2 Git Commit Recap\
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0\b0\fs24 \cf4 \strokec4 The\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git commit
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0command takes files from the Staging Index and saves them in the repository.\
\pard\pardeftab720\sl420\partightenfactor0

\f1 \cf6 \cb7 \strokec6 \uc0\u8237 $ git commit\uc0\u8236 \
\pard\pardeftab720\sl400\sa300\partightenfactor0

\f0 \cf4 \cb1 \strokec4 \uc0\u8236 This command:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls5\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 will open the code editor that is specified in your configuration\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl400\partightenfactor0
\ls5\ilvl1\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 (check out the Git configuration step from the first lesson to configure your editor)\
\pard\pardeftab720\sl400\sa300\partightenfactor0
\cf4 Inside the code editor:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls6\ilvl0\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 a commit message must be supplied\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 lines that start with a\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 #
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0are comments and will not be recorded\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 save the file after adding a commit message\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 close the editor to make the commit\
\pard\pardeftab720\sl400\sa300\partightenfactor0
\cf4 Then, use\'a0
\f1 \cf6 \cb7 \strokec6 \uc0\u8237 git log
\f0 \cf4 \cb1 \strokec4 \uc0\u8236 \'a0to review the commit you just made!\
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f3\b\fs36 \cf2 \strokec2 Further Research\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls7\ilvl0
\f0\b0\fs24 \cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://help.github.com/articles/associating-text-editors-with-git/"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 Associating text editors with Git}}\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \'a0from GitHub Help Docs\
\ls7\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 Getting Started - First-Time Git Setup}}\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \'a0from Git book\
\pard\tx566\pardeftab720\sl400\partightenfactor0
\cf4 \
\
\
}